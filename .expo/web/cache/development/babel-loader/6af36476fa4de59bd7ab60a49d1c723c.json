{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\OneDrive\\\\Desktop\\\\food app temp\\\\recipes-app-react-native\\\\src\\\\screens\\\\LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport * as Google from \"expo-google-app-auth\";\nimport firebase from \"firebase\";\nimport { RFValue } from 'react-native-responsive-fontsize';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport AppLoading from \"expo-app-loading\";\nimport * as Font from \"expo-font\";\nvar customFonts = {\n  \"Bubblegum-Sans\": require(\"../assets/fonts/BubblegumSans-Regular.ttf\")\n};\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n\n    _this.isUserEqual = function (googleUser, firebaseUser) {\n      if (firebaseUser) {\n        var providerData = firebaseUser.providerData;\n\n        for (var i = 0; i < providerData.length; i++) {\n          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _this.onSignIn = function (googleUser) {\n      var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n        unsubscribe();\n\n        if (!_this.isUserEqual(googleUser, firebaseUser)) {\n          var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n          firebase.auth().signInWithCredential(credential).then(function (result) {\n            if (result.additionalUserInfo.isNewUser) {\n              firebase.database().ref(\"/users/\" + result.user.uid).set({\n                gmail: result.user.email,\n                profile_picture: result.additionalUserInfo.profile.picture,\n                locale: result.additionalUserInfo.profile.locale,\n                first_name: result.additionalUserInfo.profile.given_name,\n                last_name: result.additionalUserInfo.profile.family_name,\n                current_theme: \"dark\"\n              }).then(function (snapshot) {});\n            }\n          }).catch(function (error) {\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            var email = error.email;\n            var credential = error.credential;\n          });\n        } else {\n          console.log(\"User already signed-in Firebase.\");\n        }\n      });\n    };\n\n    _this.signInWithGoogleAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                behaviour: \"web\",\n                androidClientId: \"531177969740-4l8106j5edijos0rr2k5edqvljltdt5c.apps.googleusercontent.com\",\n                iosClientId: \"72696421845-osrvc36bjie4264j4c0812sp5a2egqhj.apps.googleusercontent.com\",\n                scopes: [\"profile\", \"email\"]\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === \"success\")) {\n                _context.next = 9;\n                break;\n              }\n\n              _this.onSignIn(result);\n\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 9:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 10:\n              _context.next = 16;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0.message);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    _this.state = {\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"_loadFontsAsync\",\n    value: function _loadFontsAsync() {\n      return _regeneratorRuntime.async(function _loadFontsAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(customFonts));\n\n            case 2:\n              this.setState({\n                fontsLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._loadFontsAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.fontsLoaded) {\n        return React.createElement(AppLoading, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 14\n          }\n        });\n      } else {\n        return React.createElement(View, {\n          style: styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 9\n          }\n        }, React.createElement(SafeAreaView, {\n          style: styles.droidSafeArea,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 11\n          }\n        }), React.createElement(View, {\n          style: styles.appTitle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }\n        }, React.createElement(Image, {\n          source: require(\"../assets/icon.png\"),\n          style: styles.appIcon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }\n        }), React.createElement(Text, {\n          style: styles.appTitleText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }\n        }, \"Storytelling\\nApp\")), React.createElement(View, {\n          style: styles.buttonContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 11\n          }\n        }, React.createElement(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            return _this2.signInWithGoogleAsync();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }\n        }, React.createElement(Image, {\n          source: require(\"../assets/icon.png\"),\n          style: styles.googleIcon,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }\n        }), React.createElement(Text, {\n          style: styles.googleText,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }\n        }, \"Sign in with Google\"))), React.createElement(View, {\n          style: styles.cloudContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }\n        }, React.createElement(Image, {\n          source: require(\"../assets/icon.png\"),\n          style: styles.cloudImage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }\n        })));\n      }\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport { LoginScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#15193c\"\n  },\n  droidSafeArea: {\n    marginTop: Platform.OS === \"android\" ? StatusBar.currentHeight : RFValue(35)\n  },\n  appTitle: {\n    flex: 0.4,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  appIcon: {\n    width: RFValue(130),\n    height: RFValue(130),\n    resizeMode: \"contain\"\n  },\n  appTitleText: {\n    color: \"white\",\n    textAlign: \"center\",\n    fontSize: RFValue(40),\n    fontFamily: \"Bubblegum-Sans\"\n  },\n  buttonContainer: {\n    flex: 0.3,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  button: {\n    width: RFValue(250),\n    height: RFValue(50),\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    borderRadius: RFValue(30),\n    backgroundColor: \"white\"\n  },\n  googleIcon: {\n    width: RFValue(30),\n    height: RFValue(30),\n    resizeMode: \"contain\"\n  },\n  googleText: {\n    color: \"black\",\n    fontSize: RFValue(20),\n    fontFamily: \"Bubblegum-Sans\"\n  },\n  cloudContainer: {\n    flex: 0.3\n  },\n  cloudImage: {\n    position: \"absolute\",\n    width: \"100%\",\n    resizeMode: \"contain\",\n    bottom: RFValue(-5)\n  }\n});","map":{"version":3,"sources":["C:/Users/lenovo/OneDrive/Desktop/food app temp/recipes-app-react-native/src/screens/LoginScreen.js"],"names":["React","Component","Google","firebase","RFValue","TouchableOpacity","AppLoading","Font","customFonts","require","LoginScreen","props","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInWithCredential","then","result","additionalUserInfo","isNewUser","database","ref","user","set","gmail","email","profile_picture","profile","picture","locale","first_name","given_name","last_name","family_name","current_theme","snapshot","catch","error","errorCode","code","errorMessage","message","console","log","signInWithGoogleAsync","logInAsync","behaviour","androidClientId","iosClientId","scopes","type","cancelled","state","fontsLoaded","loadAsync","setState","_loadFontsAsync","styles","container","droidSafeArea","appTitle","appIcon","appTitleText","buttonContainer","button","googleIcon","googleText","cloudContainer","cloudImage","StyleSheet","create","flex","backgroundColor","marginTop","Platform","OS","StatusBar","currentHeight","justifyContent","alignItems","width","height","resizeMode","color","textAlign","fontSize","fontFamily","flexDirection","borderRadius","position","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { StyleSheet, View, Button , SafeAreaView , Platform , StatusBar , Image , Dimensions } from \"react-native\";\r\nimport * as Google from \"expo-google-app-auth\";\r\nimport firebase from \"firebase\";\r\nimport {RFValue} from 'react-native-responsive-fontsize';\r\nimport {TouchableOpacity} from 'react-native-gesture-handler';\r\nimport AppLoading from \"expo-app-loading\";\r\nimport * as Font from \"expo-font\";\r\n\r\nlet customFonts = {\r\n  \"Bubblegum-Sans\": require(\"../assets/fonts/BubblegumSans-Regular.ttf\")\r\n};\r\nexport default class LoginScreen extends Component {\r\n   constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fontsLoaded: false\r\n    };\r\n  }\r\n\r\n  async _loadFontsAsync() {\r\n    await Font.loadAsync(customFonts);\r\n    this.setState({ fontsLoaded: true });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._loadFontsAsync();\r\n  }\r\n  isUserEqual = (googleUser, firebaseUser) => {\r\n    if (firebaseUser) {\r\n      var providerData = firebaseUser.providerData;\r\n      for (var i = 0; i < providerData.length; i++) {\r\n        if (\r\n          providerData[i].providerId ===\r\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID &&\r\n          providerData[i].uid === googleUser.getBasicProfile().getId()\r\n        ) {\r\n          // We don't need to reauth the Firebase connection.\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  onSignIn = googleUser => {\r\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\r\n    var unsubscribe = firebase.auth().onAuthStateChanged(firebaseUser => {\r\n      unsubscribe();\r\n      // Check if we are already signed-in Firebase with the correct user.\r\n      if (!this.isUserEqual(googleUser, firebaseUser)) {\r\n        // Build Firebase credential with the Google ID token.\r\n        var credential = firebase.auth.GoogleAuthProvider.credential(\r\n          googleUser.idToken,\r\n          googleUser.accessToken\r\n        );\r\n\r\n        // Sign in with credential from the Google user.\r\n        firebase\r\n          .auth()\r\n          .signInWithCredential(credential)\r\n          .then(function(result) {\r\n            if (result.additionalUserInfo.isNewUser) {\r\n              firebase\r\n                .database()\r\n                .ref(\"/users/\" + result.user.uid)\r\n                .set({\r\n                  gmail: result.user.email,\r\n                  profile_picture: result.additionalUserInfo.profile.picture,\r\n                  locale: result.additionalUserInfo.profile.locale,\r\n                  first_name: result.additionalUserInfo.profile.given_name,\r\n                  last_name: result.additionalUserInfo.profile.family_name,\r\n                  current_theme: \"dark\"\r\n                })\r\n                .then(function(snapshot) {});\r\n            }\r\n          })\r\n          .catch(error => {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            // The email of the user's account used.\r\n            var email = error.email;\r\n            // The firebase.auth.AuthCredential type that was used.\r\n            var credential = error.credential;\r\n            // ...\r\n          });\r\n      } else {\r\n        console.log(\"User already signed-in Firebase.\");\r\n      }\r\n    });\r\n  };\r\n\r\n  signInWithGoogleAsync = async () => {\r\n    try {\r\n      const result = await Google.logInAsync({\r\n        behaviour: \"web\",\r\n        androidClientId:\r\n          \"531177969740-4l8106j5edijos0rr2k5edqvljltdt5c.apps.googleusercontent.com\",\r\n        iosClientId:\r\n          \"72696421845-osrvc36bjie4264j4c0812sp5a2egqhj.apps.googleusercontent.com\",\r\n        scopes: [\"profile\", \"email\"]\r\n      });\r\n\r\n      if (result.type === \"success\") {\r\n        this.onSignIn(result);\r\n        return result.accessToken;\r\n      } else {\r\n        return { cancelled: true };\r\n      }\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      return { error: true };\r\n    }\r\n  };\r\nrender() {\r\n    if (!this.state.fontsLoaded) {\r\n      return <AppLoading />;\r\n    } else {\r\n      return (\r\n        <View style={styles.container}>\r\n          <SafeAreaView style={styles.droidSafeArea} />\r\n          <View style={styles.appTitle}>\r\n            <Image\r\n              source={require(\"../assets/icon.png\")}\r\n              style={styles.appIcon}\r\n            ></Image>\r\n            <Text style={styles.appTitleText}>{`Storytelling\\nApp`}</Text>\r\n          </View>\r\n          <View style={styles.buttonContainer}>\r\n            <TouchableOpacity\r\n              style={styles.button}\r\n              onPress={() => this.signInWithGoogleAsync()}\r\n            >\r\n              <Image\r\n                source={require(\"../assets/icon.png\")}\r\n                style={styles.googleIcon}\r\n              ></Image>\r\n              <Text style={styles.googleText}>Sign in with Google</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n          <View style={styles.cloudContainer}>\r\n            <Image\r\n              source={require(\"../assets/icon.png\")}\r\n              style={styles.cloudImage}\r\n            ></Image>\r\n          </View>\r\n        </View>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#15193c\"\r\n  },\r\n  droidSafeArea: {\r\n    marginTop: Platform.OS === \"android\" ? StatusBar.currentHeight : RFValue(35)\r\n  },\r\n  appTitle: {\r\n    flex: 0.4,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  appIcon: {\r\n    width: RFValue(130),\r\n    height: RFValue(130),\r\n    resizeMode: \"contain\"\r\n  },\r\n  appTitleText: {\r\n    color: \"white\",\r\n    textAlign: \"center\",\r\n    fontSize: RFValue(40),\r\n    fontFamily: \"Bubblegum-Sans\"\r\n  },\r\n  buttonContainer: {\r\n    flex: 0.3,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  button: {\r\n    width: RFValue(250),\r\n    height: RFValue(50),\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-evenly\",\r\n    alignItems: \"center\",\r\n    borderRadius: RFValue(30),\r\n    backgroundColor: \"white\"\r\n  },\r\n  googleIcon: {\r\n    width: RFValue(30),\r\n    height: RFValue(30),\r\n    resizeMode: \"contain\"\r\n  },\r\n  googleText: {\r\n    color: \"black\",\r\n    fontSize: RFValue(20),\r\n    fontFamily: \"Bubblegum-Sans\"\r\n  },\r\n  cloudContainer: {\r\n    flex: 0.3\r\n  },\r\n  cloudImage: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    resizeMode: \"contain\",\r\n    bottom: RFValue(-5)\r\n  }\r\n});\r\n\r\n "]},"metadata":{},"sourceType":"module"}